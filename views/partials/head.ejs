<!DOCTYPE html>
<head>
<html lang="en">
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="https://fonts.googleapis.com/css2?family=Poiret+One&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.min.css">





<style>
    
    * {
        display: border-box;
        margin: 0 auto;
        padding: 0 0;
    }
    
    body{
        /* padding-top: 50px; */
        font-family: 'Poiret One', cursive;
        background-color: rgba(40,40,40,1);
        color: rgba(220,220,220,8);
        margin: 0 15px 15px 15px;
        /* flex-flow:column wrap; */
        /* display: inline; */
    }
    .italic {
        text-decoration: italic;
    }
    .center {
        margin: 0 auto;
        text-align: center;
    }

</style>

<script>
    // global variable anonymousId, assigned on page call, accessible if sent serverside
    let serverAnonymousId
    // function to be ran on load after .page() has completed and anonymousId is not null
    const callServer = () => {
        // assign variable value
        serverAnonymousId = analytics.user().anonymousId();
        // view variable value in console
        console.log('serverAnonymousId ',serverAnonymousId)
        // return value to be used on backend
        return serverAnonymousId
  }

    !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on","addSourceMiddleware","addIntegrationMiddleware","setAnonymousId","addDestinationMiddleware"];analytics.factory=function(e){return function(){var t=Array.prototype.slice.call(arguments);t.unshift(e);analytics.push(t);return analytics}};for(var e=0;e<analytics.methods.length;e++){var key=analytics.methods[e];analytics[key]=analytics.factory(key)}analytics.load=function(key,e){var t=document.createElement("script");t.type="text/javascript";t.async=!0;t.src="https://cdn.segment.com/analytics.js/v1/" + key + "/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n);analytics._loadOptions=e};analytics._writeKey="XKawp9NCehDtOGuG9zaPkcrtCyMVh9kh";analytics.SNIPPET_VERSION="4.13.2";
    analytics.load("XKawp9NCehDtOGuG9zaPkcrtCyMVh9kh");

    // ***************************************************
    // EXTENSIVE EXPLANATION OF ALL CONTEXT FIELDS â†“
    // ***************************************************
    // let context = {
    //     // active: window.document.userActivation,
    //     app:{
    //         // auto by: a-ios & a-droid
    //         // => "name": "InitechGlobal",
    //         name: window.document.appName,

    //         // auto by: a-ios & a-droid
    //         // => "545",
    //         version: window.clientInformation.appVersion,
    //     },
    //     page:{
    //         // auto by: a.js
    //         // => "path": "/academy/",
    //         // window.location.path	
    //         path: window.location.path,

    //         // [ DATATYPE = OBJECT/DICTIONARY aka {} ] =>
    //         // auto by: a.js
    //         // => "referrer": ""google.com, 
    //         // window.document.referrer	
    //         referrer: window.document.referrer,

    //         // auto by: a.js
    //         // => "search": "",
    //         // window.location.search	
    //         search: window.location.search,

    //         // auto by: a.js
    //         // => "title": "Analytics Academy",
    //         // window.location.title	
    //         title: window.location.title,

    //         // auto by: a.js
    //         // => "url": "https://segment.com/academy/"
    //         // window.location.url	
    //         url: window.location.url,

    //     },
    //     library:{   
    //         // auto by: a.js & a-ios & a-droid
    //         // => "name": "analytics.js",
    //         name: window.clientInformation.library || "TESTING-name",
    //         // auto by: a.js & a-ios & a-droid
    //         // => "version": "2.11.1"
    //         version: window.clientInformation.library || "TESTING-version",
    //     },
    //     locale: window.document.referrer,
    //     // [ DATATYPE = alphanumeric STRING aka "abc123" ] =>
    //     // auto by: a.js & a-droid
    //     // => "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1"
    //     userAgent: window.clientInformation.userAgent
    // }
    
    // analytics.page(context)
    // analytics.page({},context={
        // userAgent: context.userAgent,
        // locale: context.locale,
        // app: context.app,
    // })
    
    
    let context = {context:{
        active: window.clientInformation.userActivation,
        app:{
            name: window.document.appName,
            version: window.document.appVersion,
        },
        page:{
            path: window.location.path,
            referrer: window.document.referrer,
            search: window.location.search,
            title: window.location.title,
            url: window.location.url,
        },
        library:{   
            name: window.document.library,
            version: window.clientInformation.library,
        },
        locale: window.document.referrer,
        userAgent: window.clientInformation.userAgent
    }}
    analytics.page([],[],[],context)

    // HARD CODED DATA BELOW
    // let context = {context:{
    //     active: window.clientInformation.userActivation,
    //     app:{
    //         name: "DODGEBALL",
    //         version: "DODGE-DIP-DIVE-DUCK-DODGE",
    //     },
    //     page:{
    //         path: "dodgeball/dip.com",
    //         referrer: "www.dodgeball/.com",
    //         search: "safety",
    //         title: "dip",
    //         url: "www.dodgeball.com",
    //     },
    //     library:{   
    //         name: "dodgeball-US",
    //         version: "2.0",
    //     },
    //     locale: "Las Vegas, NEVADA, USA",
    //     userAgent: "macbook yo"
    // }}
    // analytics.page([],[],[],context)
    
    // console.log("!!!!  CONTEXT !!!!  : ", context)
    
    analytics.ready(callServer);
    // console.log(analytics);
    }}();
    

// ___________________________________________________________________________________
// -----------------------------------------------------------------------------------
// ===================================================================================
    // app.use((req, res, next) => {
    //     const req = { query, cookies, url, path, ip, host}
    //     console.log(`${req.method} ${req.originalUrl}`);

    //     // populate campaign object with any utm params
    // const campaign = {}
    // if (query.utm_content) campaign.content = query.utm_content
    // if (query.utm_campaign) campaign.name = query.utm_campaign
    // if (query.utm_medium) campaign.medium = query.utm_medium
    // if (query.utm_source) campaign.source = query.utm_source
    // if (query.utm_term) campaign.keyword = query.utm_term

    // // grab userId if present
    // let userId = null
    // if (cookies.ajs_user_id) userId = cookies.ajs_user_id

    // // if no anonymousId, send a randomly generated one
    // // otherwise grab existing to include in call to segment
    // let anonymousId
    // if (cookies.ajs_anonymous_id) {
    //     anonymousId = cookies.ajs_anonymous_id
    // } else {
    //     anonymousId = = uuid.v4()
    //     res.cookie('ajs_anonymous_id', anonymousId )
    // }

    // const referrer = req.get('Referrer')
    // const userAgent = req.get('User-Agent')

    // const properties = {
    //     query: stringify(query),
    //     referrer,
    //     path,
    //     host,
    //     url
    //     /* ++ any custom props (eg. title) */
    // }

    // const context = {
    //     campaign,
    //     userAgent,
    //     ip
    // }

    // // send a page call to segment
    // analytics.page(
    //     anonymousId, // either random (matching cookie) or from client
    //     userId, // might be null
    //     properties,
    //     context
    // )
        
    // // proceed!
    //     next();
    // })
// ===================================================================================
// -----------------------------------------------------------------------------------
// ___________________________________________________________________________________
    
    
    

    // const identifyCall = (traits) => {
    //     analytics.identify({
    //         email: traits.email, 
    //         name: traits.fullname,
    //         username: traits.username,
    //         userId : traits.username,
    //         phone_number: traits.phone_number,
    //     })

    // }


    // const trackCall = (trackEventName, props,) => {
    //     let email, name, motivation, action, duration, partners, details, destination

    //     let properties = {
    //         motivation: {
    //             motivation: props.motivation, 
    //             action: props.action,
    //             duration: props.duration,
    //             partners: props.partners,
    //             details: props.details,
    //         },
    //         destination: {
    //             email: props.email, 
    //             name: props.fullname, 
    //             destination: props.destination, 
    //             details: props.details,
    //         }
    //     };

    //     analytics.track(trackEventName, properties,)
    // }


</script>
    
</head>