<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta rel="canonical">
<link href="https://fonts.googleapis.com/css2?family=Poiret+One&display=swap" rel="stylesheet">
<title><%= page_category %><%= page_title %></title>


<style>
    /* <link rel="apple-touch-icon" sizes="180x180" href="http://localhost:4000/apple-touch-icon.png"> */
    /* <link rel="icon" type="image/png" sizes="32x32" href="http://localhost:4000/favicon-32x32.png"> */
    /* <link rel="icon" type="image/png" sizes="16x16" href="http://localhost:4000/favicon-16x16.png"> */
    /* <link rel="manifest" href="http://localhost:4000/site.webmanifest"> */

    * {
        display: border-box;
        padding: 0 0;
    }
    
    body{
        /* padding-top: 50px; */
        font-family: 'Poiret One', cursive;
        background-color: rgba(40,40,40,1);
        color: rgba(220,220,220,8);
        min-height: 100vh;
        overflow: scroll;
        /* margin: 0 15px 15px 15px;*/
        /* flex-flow:column wrap; */
        /* display: inline; */
    }
    .italic {
        text-decoration: italic;
    }
    .center {
        margin: 0 auto;
        text-align: center;
    }
    
    main {
        margin: 5vw,auto;
    }
    .main-index-container {
        margin: 5vw,auto;
    }
    .quick-links {
        text-decoration: none;
        color: pink;
    }
    .largebox{
    }
    .no-wrap{
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        display: block;
        width: 80%;
        min-width: 1px;
    }

    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: rgba(190,190,190,.5);
        color: aqua;
        text-align: center;
        max-height: 15vh;
        margin-top: 5vh;
    }
    .foot-index-container{
        margin: -5vh 20vw 5vh;
        padding: 2vh;
        background-color: rgba(70,70,70,.5);
        text-align: center;
    }
    .foot-index-container>input{
        color: rgba(50,50,50,1);
        padding: .5em;
        text-align: center;
        width: 15vw;
        font-size: 1em;
    }
    .auto-btn {
        background-color: rgba(0,0,0,0);
        color: rgba(100,100,100,1);
        font-size: 1.5em;
        /*box-shadow: 2px 2px 2px rgba(40,40,40,.8);*/
        text-shadow: 2px 2px 2px rgba(0,0,0,1);
        transition: 250ms ease-in-out;
    }
    .auto-btn:hover {
        transform: scale(1.3);
        transition: 250ms ease-in-out;
    }
    .btn-small {
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        margin: .02vw;
        padding: .25em;
        radius: 10px;
        border: none;;
    }
    .btn-small:focus {
        outline: none;
    }
    .faded-btn {
        background-color: rgba(100,100,100,.5);
    }
    .employee-company {
        display: flex;
        flex-direction:row;
        flex-wrap: wrap;
        justify-content: space-evenly;
        overflow: wrap;
        margin: 5vh auto;
    }
    .employee-company>div>button{
        background-color: rgba(175,190,200,.5);
    }
    .auto-btn .create:hover {
        transform: scale(1.1);
        transition: 200ms ease-in-out;
    }
    #docIframes{
        min-width: 95vw;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .mycomment {
        font-style: italic;
    }
    .flex-container {
        display: flex;
        justify-content: space-evenly;
        align-items: flex-start;
        align-content: stretch;
    }
    .container-col{
        flex-flow: column wrap;
    }

    .container-row{
        flex-flow: row wrap;
    }
    .button-container {
        width: 100%;
    }
    .button-container>*{
        margin: .5rem;
    }

    .product-images {
        width: 94vw;
        margin: 2vw;
        padding: 1vw;
        display: flex;
        flex-flow: row wrap;
        justify-content: space-evenly;
        align-items: flex-start;
        align-content: stretch;
    }
    .product {
        margin: 2.5vh auto;

    }
    .product-image{
        background-color: rgba(230,230,230,1);
        box-shadow: 2px 2px 0px rgba(100,100,100,.6);
        transition: 1000ms ease-in-out; 
        min-width: 10vw;
        max-width: 20vw;
        height: auto;
        max-height: 10vh;
        text-align: center;
        text-shadow: rgba(0,0,0,0);
    }
    
    .product-image:hover {
        transition: 1000ms ease-in-out; 
        transform: scale(1.2) ease-in-out;
        box-shadow: 2px 2px 0px rgba(100,100,100,.8);
        color: rgba(40,40,40,1);
    }
    .interest {
        margin: 1%;
        padding: .1rem .5rem;
        background-color: rgba(130,180,70,.0);
        color: rgba(140,140,140,1);
        border: 0 none rgba(0,0,0,0);
        cursor:pointer
    }

    /* Shutter In Vertical */
    .hvr-shutter-in-vertical {
    display: inline-block;
    vertical-align: middle;
    -webkit-transform: perspective(1px) translateZ(0);
    transform: perspective(1px) translateZ(0);
    box-shadow: 0 0 1px rgba(0, 0, 0, 0);
    position: relative;
    background: #2098D1;
    -webkit-transition-property: color;
    transition-property: color;
    -webkit-transition-duration: 0.3s;
    transition-duration: 0.3s;
    }
    .hvr-shutter-in-vertical:before {
    content: "";
    position: absolute;
    z-index: -1;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: #e1e1e1;
    -webkit-transform: scaleY(1);
    transform: scaleY(1);
    -webkit-transform-origin: 50%;
    transform-origin: 50%;
    -webkit-transition-property: transform;
    transition-property: transform;
    -webkit-transition-duration: 0.3s;
    transition-duration: 0.3s;
    -webkit-transition-timing-function: ease-out;
    transition-timing-function: ease-out;
    }
    .hvr-shutter-in-vertical:hover, .hvr-shutter-in-vertical:focus, .hvr-shutter-in-vertical:active {
    color: white;
    }
    .hvr-shutter-in-vertical:hover:before, .hvr-shutter-in-vertical:focus:before, .hvr-shutter-in-vertical:active:before {
    -webkit-transform: scaleY(0);
    transform: scaleY(0);
    }
</style>

<script>
// let pageCtegory = page_category
// let pageTitle = page_title

    // -----TIMEOUT FUNCTION----
    // function loadFrame() {
    //     var iframe = document.getElementById("defframe");
    //     iframe.src = "/frame.php"
    // };
    // window.onload = setTimeout(loadFrame, 10000);
    // analytics.timeout(500); 

        //  ↓ ! ↓ ! ↓ ! THIS TIMEOUT FUNCTION WORKS ↓ ! ↓ ! ↓ ! ↓ 
        //  const start = Date.now();
        //  console.log('starting timer...');
            //  expected output: starting timer...

        //  setTimeout(() => {
            //  const millis = Date.now() - start;

            //  console.log(`seconds elapsed = ${Math.floor(millis / 1000)}`);
            
            //  expected output: seconds elapsed = 2
        //  }, 1500);

        //  setTimeout(let pageCategory = page_category,250) 
        // setTimeout(console.log(`pageCategory : `,pageCategory),300) 
        // setTimeout(let pageTitle = page_title,325) 
        // setTimeout(console.log(`pageTitle : `,pageTitle),350) 

    // let options = {
    //     context:{
    //         active: window.clientInformation.userActivation,
    //         app:{
    //             name: window.document.appName,
    //             version: window.document.appVersion,
    //         },
    //         page:{
    //             path: window.location.path,
    //             referrer: window.document.referrer,
    //             search: window.location.search,
    //             title: window.location.title,
    //             url: window.location.url,
    //         },
    //         library:{   
    //             name: window.document.library,
    //             version: window.clientInformation.library,
    //         },
    //         locale: window.document.referrer,
    //         userAgent: window.clientInformation.userAgent
    //     },
    // }
// A Function to Get a Cookie
function getCookie(cname) {
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let ca = decodedCookie.split(';');
    for(let i = 0; i <ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}
    
    // COOKIE ANOYMOUS
        // global variable anonymousId, assigned on page call, accessible if sent serverside
    //let serverAnonymousId = getCookie("ajs_anonymous_id") => "431c77b7-c6dd-4ab6-a20e-4138cc6075b1"
    // // analytics.setAnonymousId('ABC-123-XYZ')
    // // analytics.setAnonymousId('')
    // let serverUserId = getCookie("ajs_user_id")
    // let serverGroupProperties = getCookie("ajs_group_properties")
    // let serverGroupId = getCookie("ajs_group_id")
    // let serverUserTraits = getCookie("ajs_user_traits")
    // analytics.setAnonymousId('ABC-123-XYZ')
    // analytics.setAnonymousId('')
    let serverAnonymousId, userAnonymousId, serverUserId, serverGroupProperties, serverGroupId, serverUserTraits
    
    let userId
        
    // function to be ran on load after .page() has completed and anonymousId is not null
    const callServerUser = () => {
        // assign variable value
        if(analytics.ready){
            // view variable value in console
            console.log("serverUserId : TYPE",typeof(serverUserId),serverUserId)
            if(!serverUserId){
                console.log("NEW USER - serverUserId 'falsey':" + serverUserId )
                serverUserId = Math.floor((Math.random() * 10000000) + 1);
                serverUserId = serverUserId.toString()
                console.log("NEW USER - serverUserId 'truthy':", serverUserId,"  ---  TYPE  --:", typeof(serverUserId))
            }
            else{
                console.log("serverUserId exists 'truthy': " + serverUserId )
            }
            // return value to be used on backend
            return serverUserId
        }
    }  
    
    let currentSessionId
    console.log(`currentSessionId should be blank : ` + currentSessionId)
    
    let newSession = true
    const uTC = () => {
        if (!newSession){
            return currentSessionId
            console.log(`currentSessionId should be same : `+currentSessionId)
            console.log("--- !!! Page Viewed !!! ---");
        }
        else {
            currentSessionId = Date.now()    
            console.log(`currentSessionId should change : `+currentSessionId)
            newSession = false
            console.log("--- !!! Page Viewed !!! ---");
            return currentSessionId
        }
    }


    // let writeKeyEn = "XKawp9NCehDtOGuG9zaPkcrtCyMVh9kh"
    // let writeKeyDa = "Gkyu7cBFAaqWRB76WwDAvNLkgTXiZStj"
    // let writeKeyGlobal
    // console.log(`HEY LANGUAGE HERE`,navigator.language)
    // let manualLanguageDA
    // //let manualLanguageDA = "da-DK"
    // // let manualLanguageDA = "ja"
    // if(navigator.language == "da-DK" || manualLanguageDA == "da-DK"){
    //     console.log("DANISH IS NOT ACTIVE")
    //     console.log("ENGLISH")
    //     writeKeyGlobal = writeKeyEn
        
    //     // console.log("DANISH")
    //     // writeKeyGlobal = writeKeyDa
    //     // return writeKeyGlobal
    // }
    // else if(navigator.language == "en-US"){
    //     console.log("ENGLISH")
    //     writeKeyGlobal = writeKeyEn
    //     // return writeKeyGlobal
    // }

    // ---- PAGE CALL  ----
    // console.log("calling callServerAnon function inside page");
    // analytics.page({}, { anonymousId: !callServerAnon},{},{options});
    
    // analytics.page({}, { anonymousId: !callServerAnon},{});
    
    // console.log(`pageCategory,pageTitle : `,pageCategory,pageTitle)
    // console.log(`page_category,page_title : `,page_category,page_title)
    const getPageContext = () => {
        let gaPageTitle = window.document.title
        let pageCategory
        let pageTitle

        gaPageTitle = gaPageTitle.split(" | ")
        console.log(`gaPageTitle - `,gaPageTitle)
        pageCategory = gaPageTitle[0]
        pageTitle = gaPageTitle[1]
        
        // angularCanonicalUrl = "thisapp/"
        // angularComponent = "userContainer/"
        // PAGE FORMAT
        // /* analytics.page([category], [name], [properties], [options], [callback]); */
        analytics.page(pageCategory,pageTitle, {},
        // {
            // title: "OVERRIDING TITLE",
            // url: `${angularCanonicalUrl}${angularComponent}`,
            // path: `${angularComponent}`,
        //},
        {
            // integrations:{Klaviyo:true, Amplitude:{sessionId:uTC()}},
            // anonymousId : "1234567890"
        }, 
            setTimeout(() => {
                // const millis = Date.now() - start;
                
                serverAnonymousId = window.localStorage.ajs_anonymous_id
                console.log("FRESH PAGE LOAD", pageCategory,pageTitle)
                console.log(`window.location.href - URL : `,window.location.href)
                console.log(`serverAnonymousId - `,serverAnonymousId)

                // console.log(`seconds elapsed = ${Math.floor(millis / 1000)}`);
                // expected output: seconds elapsed = 2
            }, 1500)
        );
        //analytics.track("Page Viewed",{name:document.title, path: document.location.pathname, referrer: document.referrer, search : window.location.search,  title: document.title,  url: document.URL},{integrations:{Klaviyo:true}})
    }
    let closed = false
    let where = ""
    let beforeUnload = () => {
        analytics.track("Before Unload", {now: Date.now(), closed: closed, where : where})
    }

    window.addEventListener('beforeunload', function (e) {
        e.preventDefault();
        closed = true
        where = "window funk"
        e.returnValue = beforeUnload();
    });
    
    if (closed)  {
        where = "if statement"
        beforeUnload()
    }
        // console.log(`before function FIRST`, Date.now())
      !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on","addSourceMiddleware","addIntegrationMiddleware","setAnonymousId","addDestinationMiddleware"];analytics.factory=function(e){return function(){var t=Array.prototype.slice.call(arguments);t.unshift(e);analytics.push(t);return analytics}};for(var e=0;e<analytics.methods.length;e++){var key=analytics.methods[e];analytics[key]=analytics.factory(key)}analytics.load=function(key,e){var t=document.createElement("script");t.type="text/javascript";t.async=!0;t.src="https://cdn.segment.com/analytics.js/v1/" + key + "/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n);analytics._loadOptions=e};analytics._writeKey="XKawp9NCehDtOGuG9zaPkcrtCyMVh9kh";analytics.SNIPPET_VERSION="4.15.3";
        // console.log(`inside function LAST`,Date.now())
        analytics.load("XKawp9NCehDtOGuG9zaPkcrtCyMVh9kh", {integrations:{"All":true, "Braze":true, "Segment.io": true, "Eloqua":true, "HubSpot":true, "Marketo V2":true, "Mixpanel":true, "Customer.io":true, "Klaviyo":true, "Google Analytics" : true, "Actions Amplitude":true}});

            userAnonymousId = getCookie("ajs_anonymous_id")
            serverAnonymousId = getCookie("ajs_anonymous_id")
            serverUserId = getCookie("ajs_user_id")
            serverGroupProperties = getCookie("ajs_group_properties")
            serverGroupId = getCookie("ajs_group_id")
            serverUserTraits = getCookie("ajs_user_traits")

            analytics.ready(getPageContext());
            // analytics.ready(getPageContext());
            // console.log(`AFTER PAGE CALL: PAGE NAME = `,pageCategory,pageTitle);

            //     for(let i=0; i<gaPageTitle.length; i++){
            //         if(gaPageTitle[i]=="|"){
            //             pageCategory = gaPageTitle[0,i+1]
            //             console.log('pageCategory:',pageCategory)
            //             pageTitle = gaPageTitle[i+1,gaPageTitle.length]
            //             console.log('pageTitle:',pageTitle)
            //         }
            //         if(i ==gaPageTitle.length){
            //             console.log(`pageCategory,pageTitle : `,pageCategory,pageTitle)
            //             let pageCategoryTitle = (pageCategory,pageTitle)
            //             analytics.page(pageCategory,pageTitle);
            //         }
            //     }

            // Below page call passes page category and page name alright but not recognized in GA
            
            // analytics.page(page_category, page_title);
            // if(page_category && page_title){
            //         analytics.page(page_category,page_title)
            // }

            // analytics.page({},{},{},{options});

            // console.log('window.location.search - QUERY STRING : ',window.location.search)
        
        // QUERYSTRING EXISTS
            const queryStringExists = () => {
                if(!window.location.search){
                    console.log("NO QUERY STRING EXISTS ... moving on...")
                }
                else{
                    console.log("QUERY STRING EXISTS !!! : ",window.location.search)
                    analytics.track("Page View by GTM")
                }   
            }

        analytics.ready(callServerUser);
        console.log("calling callServerUser function - head-line470",);
        analytics.ready(queryStringExists);
        analytics.ready(console.log(`analytics : `,analytics));
        // console.log(`AFTER FUNCTION but before running`,Date.now())
        // window.onload = setTimeout(segment, 50000);
        
        // async function anonCookie(userAnonymousId){
        if(userAnonymousId != null || userAnonymousId != undefined ){
            console.log(`ajs_anonymous_id : userAnonymousId - `,userAnonymousId)
        }
        else {
            console.log(`UNDEFINED ajs_anonymous_id : userAnonymousId - `,userAnonymousId)
        }
    }}();

// 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 🍪 ⏰ 
// A Function to Set a Cookie
function setCookie(cname, cvalue, exdays) {
    const d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    let expires = "expires="+ d.toUTCString();
    console.log(`cookie expires : `,expires)
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}



// "\"f00c99f2-f6e5-4b88-b12f-84ce726d35dc\""
// "\"f00c99f2-f6e5-4b88-b12f-84ce726d35dc\""



// A Function to Check a Cookie
function checkCookie() {
    let username = getCookie("username");
    if (username != "") {
        alert("Welcome again " + username);
    } else {
        username = prompt("Please enter your name:", "");
        if (username != "" && username != null) {
        setCookie("username", username, 365);
        }
    }
}
    // console.log("page_view",{category:titleSplit[1],name:titleSplit[0]},context:{category:titleSplit[1],name:titleSplit[0]})
    

let checkIfUserIdExist = () => {
    let userId = analytics.user().id()
    let email = analytics.user().traits().email;

    if (userId == null & email != null){
        analytics.identify(email, {email:email})
        console.log("if statement : sending identify with email & email as trait")
    }
    else if (userId === null & email == null){
        analytics.identify()
        console.log("else if statement : sending identify without userId or email")
    }
    else {
        analytics.identify(userId, {email:email})
        console.log("else statement : sending identify with userId & email as trait")
    }
}



</script>
</head>
</html>